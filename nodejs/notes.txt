
[ Node.js ]

Conventional applications - Different requests are handled by different threads .  
When a thread hits a datastore/db, it keeps waiting till it gets data 

NodeJs - Here a single thread handles all requests based on event model . 
cross platform runtime environment for server side web application development using javascript.
Single Threaded event loop .Hence avoids the cost of thread context switching
Uses non blocking IO
Any function performing IO calls must use a callback
Uses Chrome V8 engine
NPM - is the package manager to install node.js applications
https://www.npmjs.com/


Request cannot be cpu intensive, else all requests will be choked.
So any intensive computation should be offloaded to other systems
eg facebook likes updates db which is a IO operation. Instead of immediately doing it , add likes to a queue and will
be  “eventually persisted”   (ie not immediately persisted)


Node can do ‘push’ via websockets to clients
‘global’ module
These are available globally and need not be prefixed with ‘global’
Eg console, 

NPM
www.npmjs.org
set proxy for npm
npm config set proxy http://proxy.company.com:8080
npm config set https-proxy http://proxy.company.com:8080

set PATH=%appdata%\npm;D:\Program Files\nodejs;%PATH%

NPM Modules

# load and run js
.load test.js

# global install
npm install express -g

# list modules
npm ls -g

- install  module locally
npm install moduleName

npm remove moduleName
npm ls


[ Package.json ]

- initialize a project in package.json file
npm init

- install express
- --save will also add it in package.json
npm install -g express --save

- install all deps from a given package.json file
- move to the dir with the package.json file and give the command
npm install

[ GRUNT ]

# install grunt cli globally
npm install -g grunt-cli

# others should be installed locally
# -save-dev means it is a dev dependency, ie dependency at build time
# -save means dependency at run time
npm install  grunt -save-dev
npm install  grunt-typescript -save-dev
Npm install  grunt-contrib-watch -save-dev

http://geeklearning.io/grunt-configuration-for-your-nodejs-server-in-typescript/

Gruntfile.js
See samples

[ Visual studio code .d files and Intellisense ]

http://stackoverflow.com/questions/29975036/how-to-import-intellisense-files-into-vscode-visual-studio-code
https://github.com/DefinitelyTyped/tsd

- install type script definition util
npm install tsd -g

- install .d.ts file for the module and save in tsd.d.ts file
tsd install node --save

- use in .ts file
/// <reference path="typings/tsd.d.ts"/>

- tsd is deprecated. Instead use
typings

npm install -g typings


Links

Node.js
http://blog.modulus.io/absolute-beginners-guide-to-nodejs
http://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js  - very good high level
http://www.toptal.com/javascript/guide-to-full-stack-javascript-initjs
http://www.tutorialspoint.com/nodejs/nodejs_first_application.htm

http://nodejs.org



[ Single page Applications ]

- While JS enhanced Apps do most of the page rendering on the server side and send back the HTML
- Single page apps do almost all of their rendering on the client side (that means in the browser).
- Once you load a single page application in the browser, there is no full page reload and all the updates on 
the page happen using Javascript.

gmail /  trello /

https://medium.com/@pshrmn/demystifying-single-page-applications-3068d0555d46

Internal State SPA
- location is not updated
- so no way to share links to another portion of app

Location Based SPAs
- location is updated in hash as you navigate

window.location
- protocol,host,port
- pathname    - /myapp
- search   -  ?name=test
- hash   -  #val

Routers - Route Matching
- SPAs depend on routers for route matching
- After matching a route, the router will trigger a re-render of the application.



[ Notes ]

Three types of code in Node
your own source files
core node modules
installed dependencies in node_modules


# load modules
var http = require(“http”)


Use
server.use(callback);
This means ‘callback’ is a express middleware


“Var”
Never use ‘var’ for variable declarations
It has so many issues, eg global scope
Instead use “let”

For loop

// iterates over array elements
for (let fruit of fruits) {
  console.log( fruit );
}

Install packages globally  ‘-g’
npm install -g  express


‘this’ keyword
https://stackoverflow.com/questions/20279484/how-to-access-the-correct-this-inside-a-callback
Functions are first class objects in JS
The ‘this’ value depends on how function is called
In callbacks, if we want ‘this’ to refer to callback object, we need to ‘bind’ the object to the callback function
